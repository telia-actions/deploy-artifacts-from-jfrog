name: 'Deploy artifacts from JFrog'
description: 'Download artifacts from JFrog by given repository name and unique string (usually short git sha) in the artifact name and deploys to given server. Uses Powershell.'
inputs:
  jfrog-repo-name:
    description: 'Name of JFrog repository to download from'
    required: true
  jfrog-username:
    description: 'JFrog username to use for downloading artifact. Should have READ permissions.'
    required: true
  jfrog-password:
    description: 'JFrog user password'
    required: false
  search-phrase:
    description: 'Substring of artifact name, usually short GIT SHA'
    required: true
  archive-extension:
    description: 'Extension of artifact archive file'
    required: true
    default: 'zip'
  server-msdeploy-url:
    description: 'Url of server msdeploy, usually in format of https://some-server-name:8172/msdeploy.axd'
    required: true
  server-msdeploy-username:
    description: 'Server username to use for deploying'
    required: true
  server-msdeploy-password:
    description: 'Server user password to use for deploying'
    required: true
  server-iis-site-name:
    description: 'Name of the IIS site on the server'
    required: true
  application-path:
    description: 'Optional sub-path of application in JFrog artifact (in case archive contains more than one application or application source is in some sub-folder)'
    required: false
  msdeploy-skip-parameter:
    description: 'Optional MsDeploy -skip parameter value. For example, objectName=dirPath,absolutePath=Logs, or objectName=filePath,absolutePath=site.config.'
runs:
  using: "composite"
  steps:
    - name: Download artifact
      shell: powershell
      run: |
        
        function WriteLog {
          param (
            $Text
          )
          
          Write-Host "$(Get-Date -Format o): " -NoNewline -BackgroundColor DarkMagenta -ForegroundColor Yellow
          Write-Host $Text -BackgroundColor DarkMagenta -ForegroundColor Gray
        }
        
        $authHeaderValue = "Basic " + [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes("${{ inputs.jfrog-username }}:${{ inputs.jfrog-password }}"))
        
        WriteLog("Searching for artifact with '${{ inputs.search-phrase }}' in repository '${{ inputs.jfrog-repo-name }}'")
        
        $response = Invoke-WebRequest `
          -Method Get `
          -Uri "https://jfrog.teliacompany.io/artifactory/api/search/artifact?name=${{ inputs.search-phrase }}&repos=${{ inputs.jfrog-repo-name }}" `
          -Headers @{ "Authorization" = $authHeaderValue; "X-Result-Detail" = "info" } `
          -UseBasicParsing
        
        $results = (ConvertFrom-Json -InputObject ([System.Text.Encoding]::UTF8.GetString($response.Content))).results
        $firstArtifact = $results | Sort-Object created -Descending | Select-Object -First 1
        
        if ($firstArtifact -eq $null) {
          throw "No artifact found with GIT commit hash ${{ inputs.commit_hash }}"
        }
        
        WriteLog("Downloading artifact '$firstArtifact'")
        
        Invoke-WebRequest `
          -Method Get `
          -Uri $firstArtifact.downloadUri `
          -Headers @{ "Authorization" = $authHeaderValue } `
          -OutFile "${{ github.workspace }}\Artifact.${{ inputs.archive-extension }}" `
          -UseBasicParsing
        
        WriteLog("Extracting artifact to '${{ github.workspace }}\_deploy'")
        
        $artifactZip = "${{ github.workspace }}\Artifact.${{ inputs.archive-extension }}"
        $artifactPath = "${{ github.workspace }}\_deploy"
        Expand-Archive -Path $artifactZip -DestinationPath $artifactPath -Force
        
        $msdeployPath = "C:\Program Files\IIS\Microsoft Web Deploy V3\msdeploy.exe"
        
        if (!(Test-Path $msdeployPath)) {
          WriteLog("Web Deploy installation not found, downloading and installing")
          
          # URL for Web Deploy installer
          $url = "https://download.microsoft.com/download/0/1/D/01DC28EA-638C-4A22-A57B-4CEF97755C6C/WebDeploy_amd64_en-US.msi"
          
          # Define the output location for the installer
          $output = "$env:TEMP\WebDeploy_amd64_en-US.msi"
          echo $output
          
          # Download the installer
          Invoke-WebRequest -Uri $url -OutFile $output
          
          # Install Web Deploy
          Start-Process msiexec.exe -Wait -ArgumentList "/I $output /quiet /qn /norestart" -verbose
          
          # Remove the installer
          Remove-Item -Path $output
          
          WriteLog("Web Deploy installed successfully")
        }
        
        $max_retries = 3
        $retries = 0
        
        $arguments = @(
            "-verb:sync",
            "-source:iisApp=${{ github.workspace }}\_deploy\${{ inputs.application-path }}",
            "-dest:iisApp=${{ inputs.server-iis-site-name }},computerName=${{ inputs.server-msdeploy-url }},username=${{ inputs.server-msdeploy-username }},password=${{ inputs.server-msdeploy-password }},authtype=Basic,includeAcls=False",
            "-skip:${{ inputs.msdeploy-skip-parameter }}",
            "-AllowUntrusted",
            "-verbose"
        )
        
        do {
          WriteLog("Deploying to ${{ inputs.server-msdeploy-url }}")
          
          try {
            & $msdeployPath $arguments
            if ($lastexitcode -gt 0) { throw } else { WriteLog("Done!") }
            break;
          } catch {
            $retries++
            WriteLog("Failed with error $_")
            if ($retries -lt $max_retries) {
              echo "Retrying in a few seconds"
            }
            Start-Sleep -Milliseconds 3000
          }
        } while ($retries -lt $max_retries)

